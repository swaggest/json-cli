// Code generated by github.com/swaggest/json-cli, DO NOT EDIT.

// Package message contains JSON mapping structures.
package message

import (
	"encoding/json"
	"errors"
	"regexp"
	"strings"
)

// ComponentsSchemasMessagingReaderReads structure is generated from "#/components/schemas/MessagingReaderReads".
type ComponentsSchemasMessagingReaderReads struct {
	Reads          []ComponentsSchemasReadRead `json:"reads,omitempty"`
	Country        string                      `json:"country,omitempty"`         // Country
	ReaderID       int64                       `json:"reader_id,omitempty"`
	Week           string                      `json:"week,omitempty"`            // Week
	SubscriptionID int64                       `json:"subscription_id,omitempty"`
}

// ComponentsSchemasReadRead structure is generated from "#/components/schemas/ReadRead".
type ComponentsSchemasReadRead struct {
	Amount   int64                         `json:"amount,omitempty"`
	EntityID string                        `json:"entity_id,omitempty"` // ID of the charged entity
	Strategy ComponentsSchemasPlotStrategy `json:"strategy,omitempty"`  // Read strategy
}

type marshalComponentsSchemasReadRead ComponentsSchemasReadRead

// UnmarshalJSON decodes JSON.
func (i *ComponentsSchemasReadRead) UnmarshalJSON(data []byte) error {
	ii := marshalComponentsSchemasReadRead(*i)
	constValues := make(map[string]json.RawMessage)
	mayUnmarshal := []interface{}{&constValues}
	err := unmarshalUnion(
		[]interface{}{&ii},
		mayUnmarshal,
		[]string{
			"amount",
			"entity_id",
			"strategy",
		},
		nil,
		data,
	)
	if v, ok := constValues["entity_type"];!ok || string(v) != `"book"` {
	    return errors.New(`bad or missing const value for "entity_type" ("book" expected)`)
	}
	if v, ok := constValues["reason"];!ok || string(v) != `"premium"` {
	    return errors.New(`bad or missing const value for "reason" ("premium" expected)`)
	}
	if v, ok := constValues["type"];!ok || string(v) != `"surcharge"` {
	    return errors.New(`bad or missing const value for "type" ("surcharge" expected)`)
	}
	if err != nil {
		return err
	}
	*i = ComponentsSchemasReadRead(ii)
	return err
}

var (
	// constComponentsSchemasReadRead is unconditionally added to JSON.
	constComponentsSchemasReadRead = json.RawMessage(`{"entity_type":"book","reason":"premium","type":"surcharge"}`)
)

// MarshalJSON encodes JSON.
func (i ComponentsSchemasReadRead) MarshalJSON() ([]byte, error) {
	return marshalUnion(marshalComponentsSchemasReadRead(i), constComponentsSchemasReadRead)
}

// ComponentsSchemasPlotStrategy is a constant type
type ComponentsSchemasPlotStrategy string

// ComponentsSchemasPlotStrategy values enumeration
const (
	ComponentsSchemasPlotStrategyFast = ComponentsSchemasPlotStrategy("fast")
	ComponentsSchemasPlotStrategySlow = ComponentsSchemasPlotStrategy("slow")
)

// MarshalJSON encodes JSON.
func (i ComponentsSchemasPlotStrategy) MarshalJSON() ([]byte, error) {
	switch i {
	case ComponentsSchemasPlotStrategyFast:
	case ComponentsSchemasPlotStrategySlow:

	default:
		return nil, errors.New("unexpected value")
	}

	return json.Marshal(string(i))
}

// UnmarshalJSON decodes JSON.
func (i *ComponentsSchemasPlotStrategy) UnmarshalJSON(data []byte) error {
	var ii string
	err := json.Unmarshal(data, &ii)
	if err != nil {
		return err
	}
	v := ComponentsSchemasPlotStrategy(ii)
	switch v {
	case ComponentsSchemasPlotStrategyFast:
	case ComponentsSchemasPlotStrategySlow:

	default:
		return errors.New("unexpected value")
	}

	*i = v
	return nil
}

func marshalUnion(maps ...interface{}) ([]byte, error) {
	result := make([]byte, 1, 100)
	result[0] = '{'
	isObject := true
	for _, m := range maps {
		j, err := json.Marshal(m)
		if err != nil {
			return nil, err
		}
		if string(j) == "{}" {
			continue
		}
		if string(j) == "null" {
			continue
		}
		if j[0] != '{' {
			if len(result) == 1 && (isObject || bytes.Equal(result, j)) {
				result = j
				isObject = false
				continue
			}
			return nil, errors.New("failed to union map: object expected, " + string(j) + " received")
		}

		if !isObject {
			return nil, errors.New("failed to union " + string(result) + " and " + string(j))
		}

		if len(result) > 1 {
			result[len(result)-1] = ','
		}
		result = append(result, j[1:]...)
	}
	// Close empty result.
	if isObject && len(result) == 1 {
		result = append(result, '}')
	}

	return result, nil
}
func unmarshalUnion(
	mustUnmarshal []interface{},
	mayUnmarshal []interface{},
	ignoreKeys []string,
	regexMaps map[string]interface{},
	j []byte,
) error {
	for _, item := range mustUnmarshal {
		// unmarshal to struct
		err := json.Unmarshal(j, item)
		if err != nil {
			return err
		}
	}

	for i, item := range mayUnmarshal {
		// unmarshal to struct
		err := json.Unmarshal(j, item)
		if err != nil {
			mayUnmarshal[i] = nil
		}
	}

	// unmarshal to a generic map
	var m map[string]*json.RawMessage
	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// removing ignored keys (defined in struct)
	for _, i := range ignoreKeys {
		delete(m, i)
	}

	// returning early on empty map
	if len(m) == 0 {
		return nil
	}

	// preparing regexp matchers
	var reg = make(map[string]*regexp.Regexp, len(regexMaps))
	for regex := range regexMaps {
		if regex != "" {
			reg[regex], err = regexp.Compile(regex)
			if err != nil {
				return err //todo use errors.Wrap
			}
		}
	}

	subMapsRaw := make(map[string][]byte, len(regexMaps))
	// iterating map and feeding subMaps
	for key, val := range m {
		matched := false
		var ok bool
		keyEscaped := `"` + strings.Replace(key, `"`, `\"`, -1) + `":`

		for regex, exp := range reg {
			if exp.MatchString(key) {
				matched = true
				var subMap []byte
				if subMap, ok = subMapsRaw[regex]; !ok {
					subMap = make([]byte, 1, 100)
					subMap[0] = '{'
				} else {
					subMap = append(subMap[:len(subMap)-1], ',')
				}

				subMap = append(subMap, []byte(keyEscaped)...)
				subMap = append(subMap, []byte(*val)...)
				subMap = append(subMap, '}')

				subMapsRaw[regex] = subMap
			}
		}

		// empty regex for additionalProperties
		if !matched {
			var subMap []byte
			if subMap, ok = subMapsRaw[""]; !ok {
				subMap = make([]byte, 1, 100)
				subMap[0] = '{'
			} else {
				subMap = append(subMap[:len(subMap)-1], ',')
			}
			subMap = append(subMap, []byte(keyEscaped)...)
			subMap = append(subMap, []byte(*val)...)
			subMap = append(subMap, '}')

			subMapsRaw[""] = subMap
		}
	}

	for regex := range regexMaps {
		if subMap, ok := subMapsRaw[regex]; !ok {
			continue
		} else {
			err = json.Unmarshal(subMap, regexMaps[regex])
			if err != nil {
				return err
			}
		}
	}
	return nil
}
